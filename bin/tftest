#!/usr/bin/env node

const path = require('path');
const commander = require('commander');
const Plan = require('../lib/plan.js');
const Runner = require('../lib/runner.js');
const { getTfJson } = require('../lib/generic.js');

let tfFolder = null;
let tfPlan = null;

const show = (arg, bla) => {
  const planPath=path.join(process.cwd(), arg);
  console.log(JSON.stringify(new Plan(planPath).plan, null, 2));
}

const cli = (arg) => {
  if (commander.terraformFolder) tfFolder = commander.terraformFolder
  if (commander.terraformPlan) tfPlan = commander.terraformPlan
  if (tfFolder && tfPlan) {
    const cliRun = new Runner(commander.terraformFolder, commander.terraformPlan);
    cliRun.setupJasmine();
    cliRun.execute();
  }
}

const fetchTjjson = (os) => {
  getTfJson((os=== 'win32') ? 'windows' : os);
}

commander
  .version(require('../package.json').version)
  .option('-t, --terraformFolder <path>', 'Path of terraform modules folder <path>', cli, process.cwd())
  .option('-p, --terraformPlan <path>', 'Path of terraform modules plan <path>', cli, path.join(process.cwd(), 'output.plan'))
  .option('-s, --show <type>', 'Path of terraform plan <path> to print json', show, path.join(process.cwd(), 'output.plan'))
  .option('-j, --gettfjson', 'Get tfjson for', fetchTjjson, 'linux')
  .parse(process.argv);
